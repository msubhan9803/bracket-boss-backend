# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Action {
  createdDate: DateTime!
  id: CustomID!
  name: String!
  policies: [Policy!]
  updatedDate: DateTime!
}

type BulkMatchImportResponseDto {
  message: String!
}

type Club {
  createdDate: DateTime!
  description: String!
  id: CustomID!
  logo: String!
  name: String!
  slug: String!
  updatedDate: DateTime!
  userRoleClub: [UserRoleClub!]
  users: [User!]
}

type Court {
  club: Club!
  courtLength: Float!
  courtSchedules: [CourtSchedule!]!
  courtWidth: Float!
  id: CustomID!
  location: String!
  name: String!
}

type CourtListResponse {
  courts: [Court!]!
  totalRecords: Int!
}

type CourtSchedule {
  court: Court!
  createdAt: DateTime!
  day: Day!
  id: Float!
  timeSlot: TimeSlot!
  updatedAt: DateTime!
}

input CreateClubInputDto {
  description: String!
  logo: String!
  name: String!
  slug: String!
}

type CreateClubResponseDto {
  club: Club!
  message: String!
}

input CreateTeamInputDto {
  name: String!
  tournamentId: Int!
  userIds: [Int!]!
}

input CreateTournamentInputDto {
  description: String!
  end_date: DateTime!
  isPrivate: Boolean!
  matchBestOfRounds: Float!
  name: String!
  numberOfPools: Float!
  playOffFormatId: Float!
  poolPlayFormatId: Float!
  splitSwitchGroupBy: SplitSwitchGroupByEnum
  start_date: DateTime!
  teamGenerationTypeId: Float!
}

input CreateTournamentTeamsInputDto {
  tournamentId: Int!
  users: [Float!]!
}

"""A custom scalar to handle numeric IDs as integers"""
scalar CustomID

input DailyScheduleInputDto {
  day: String!
  scheduleTimings: [ScheduleTimingInputDto!]! = []
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Day {
  createdAt: DateTime!
  id: Float!
  name: DayName!
  updatedAt: DateTime!
}

enum DayName {
  friday
  monday
  saturday
  sunday
  thursday
  tuesday
  wednesday
}

input DeleteScheduleInputDto {
  tournamentId: Float!
}

type DeleteScheduleResponseDto {
  message: String!
}

input FilterMatchesInputDto {
  courts: [Float!]
  date: DateTime
  endTime: String
  levels: [Float!]
  pools: [Float!]
  rounds: [Float!]
  startTime: String
  status: [MatchStatusTypes!]
  teams: [Float!]
  tournamentId: Float!
}

type Format {
  created_at: DateTime!
  id: CustomID!
  name: FormatType!
  teamGenerationTypes: [TeamGenerationType!]!
  updated_at: DateTime!
}

enum FormatType {
  double_elimination
  round_robin
  single_elimination
}

enum GenderTypes {
  FEMALE
  MALE
}

type GetAllTeamsByTournamentIdResponse {
  teams: [Team!]!
}

input GetScheduleOfTournamentInput {
  tournamentId: Float!
}

type Level {
  created_at: DateTime!
  format: Format!
  id: CustomID!
  matches: [Match!]!
  name: String!
  order: Float!
  pools: [Pool!]!
  tournament: Tournament!
  type: LevelTypeEnum!
  updated_at: DateTime!
}

enum LevelTypeEnum {
  play_off
  pool_play
}

input LoginInputDto {
  email: String!
  password: String!
}

type LoginResponseDto {
  authTokens: RefreshTokenResponseDto!
  user: User!
}

type Match {
  awayTeam: Team!
  created_at: DateTime!
  homeTeam: Team!
  id: CustomID!
  level: Level!
  matchCourtSchedule: MatchCourtSchedules
  matchRounds: [MatchRound!]!
  pool: Pool!
  round: Round!
  status: MatchStatusTypes!
  title: String!
  tournament: Tournament!
  updated_at: DateTime!
  winnerTeam: Team
}

type MatchCourtSchedules {
  courtSchedule: CourtSchedule!
  createdAt: DateTime!
  id: Float!
  match: Match!
  matchDate: DateTime!
}

type MatchRound {
  created_at: DateTime!
  id: CustomID!
  match: Match!
  matchRoundNumber: Float!
  updated_at: DateTime!
}

enum MatchStatusTypes {
  completed
  in_progress
  not_started
  paused
  void
}

type MessageResponseDto {
  message: String!
}

type Module {
  created_at: DateTime!
  id: CustomID!
  name: String!
  rolePolicyModule: [ModulePolicyRole!]
  updated_at: DateTime!
}

type ModulePolicyRole {
  created_at: DateTime!
  id: CustomID!
  module: Module!
  policy: Policy!
  role: Role!
  updated_at: DateTime!
}

type Mutation {
  bulkMatchImport(file: Upload!): BulkMatchImportResponseDto!
  createClub(input: CreateClubInputDto!): CreateClubResponseDto!
  createSchedule(tournamentId: Float!): Level!
  createTeam(input: CreateTeamInputDto!): Team!
  createTournament(input: CreateTournamentInputDto!): Tournament!
  createTournamentTeam(input: CreateTournamentTeamsInputDto!): [Team!]!
  deleteSchedule(input: DeleteScheduleInputDto!): DeleteScheduleResponseDto!

  """Download empty schedule template"""
  downloadEmptyScheduleTemplate: String!

  """Download user data for schedule"""
  downloadUserDataForSchedule: String!
  login(input: LoginInputDto!): LoginResponseDto!
  refreshToken: RefreshTokenResponseDto!
  register(input: RegisterInputDto!): MessageResponseDto!
  resetPassword(newPassword: String!): MessageResponseDto!
  sendForgotPasswordEmail(email: String!): MessageResponseDto!
  startTournament(tournamentId: Float!): Tournament!
  updateTournament(input: UpdateTournamentInput!): Tournament!
  updateUserClub(input: UpdateUserClubDto!): UpdateUserResponseDto!
  updateUserRole(input: UpdateUserRoleDto!): UpdateUserRoleResponseDto!
  uploadFile(file: Upload!): UploadFileResponseDto!
  upsertCourt(input: UpsertCourtInputDto!): Court!
  verifyEmail(input: VerifyEmailInputDto!): MessageResponseDto!
  verifyOtp(email: String!, otp: String!): OtpVerifyResponseDto!
}

type OtpVerifyResponseDto {
  message: String!
  token: String!
}

type PermissionByRoleIdResponse {
  id: String!
  moduleId: String!
  moduleName: String!
  policyId: String!
  policyName: String!
  roleId: String!
}

type Policy {
  actions: [Action!]
  createdDate: DateTime!
  id: ID!
  name: String!
  rolePolicyModule: [ModulePolicyRole!]
  updatedDate: DateTime!
}

type Pool {
  created_at: DateTime!
  id: CustomID!
  level: Level!
  matches: [Match!]!
  name: String!
  order: Float!
  rounds: [Round!]!
  tournament: Tournament!
  updated_at: DateTime!
}

type Query {
  getAllClubs: [Club!]!
  getAllCourts(clubId: Int, filter: String, filterBy: String, page: Int, pageSize: Int, sort: SortInput): CourtListResponse!
  getAllFormats: [Format!]!
  getAllMatchesWithFilters(input: FilterMatchesInputDto!): [Match!]!
  getAllStepsByRole(input: StepsByRoleDto!): [Step!]!
  getAllTeamGenerationTypesByFormatId(formatId: Float!): [TeamGenerationType!]!
  getAllTeams(filter: String, filterBy: String, page: Int, pageSize: Int, sort: SortInput): TeamListResponse!
  getAllTeamsByTournamentId(tournamentId: Float!): GetAllTeamsByTournamentIdResponse!
  getAllTournaments(filter: String, filterBy: String, page: Int, pageSize: Int, sort: SortInput): TournamentListResponse!
  getAllTournamentsWithoutPagination: [Tournament!]!
  getAllUsers(filter: String, filterBy: String, page: Int, pageSize: Int, sort: SortInput, userRole: Float): UserListResponse!
  getAllUsersWithoutPagination(userRole: Float): [User!]!
  getClubById(clubId: Float!): Club!
  getCourtById(courtId: Float!): Court!
  getLevelsByTournament(tournamentId: Float!): [Level!]!
  getMatchesByRoundId(roundId: Float!): [Match!]!
  getPermissionsByRoleId(roleId: Float!): [PermissionByRoleIdResponse!]!
  getPoolsByLevel(levelId: Float!): [Pool!]!
  getRoundsByPoolId(poolId: Float!): [Pool!]!
  getScheduleOfTournament(input: GetScheduleOfTournamentInput!): [Level!]!
  getStepsOfUser: [Step!]!
  getTournamentById(tournamentId: Float!): Tournament!
  getUserById(clubId: Float, userId: Float!): UserWithRoleClub!
}

type RefreshTokenResponseDto {
  accessToken: String!
  expiresIn: Float!
  refreshToken: String!
}

input RegisterInputDto {
  clubId: Int
  email: String!
  name: String!
  password: String!
}

type Role {
  createdDate: DateTime!
  id: CustomID!
  name: RoleName!
  rolePolicyModule: [ModulePolicyRole!]
  steps: [Step!]
  updatedDate: DateTime!
  userRoleClub: [UserRoleClub!]
}

enum RoleName {
  club_owner
  league_organizer
  player
  super_admin
  tournament_organizer
}

type Round {
  created_at: DateTime!
  id: CustomID!
  matches: [Match!]!
  name: String!
  order: Float!
  pool: Pool!
  status: RoundStatusTypesEnum!
  tournament: Tournament!
  updated_at: DateTime!
}

enum RoundStatusTypesEnum {
  completed
  in_progress
  not_started
}

input ScheduleTimingInputDto {
  endTime: String!
  id: Float
  startTime: String!
}

input SortInput {
  direction: String!
  field: String!
}

enum SplitSwitchGroupByEnum {
  gender
  rating
}

type Sport {
  created_at: DateTime!
  description: String!
  id: CustomID!
  name: SportName!
  updated_at: DateTime!
}

enum SportName {
  pickleball
}

type Step {
  createdDate: DateTime!
  id: ID!
  name: StepNames!
  roles: [Role!]
  updatedDate: DateTime!
  users: [User!]
}

enum StepNames {
  club_information_insertion
  club_selection
  email_verification
  registration
  user_type_selection
}

input StepsByRoleDto {
  roleId: Float!
}

type Team {
  createdDate: DateTime!
  id: CustomID!
  name: String!
  statusInTournament: TeamStatusTypes!
  tournament: Tournament!
  updatedDate: DateTime!
  users: [User!]
}

type TeamGenerationType {
  created_at: DateTime!
  formats: [Format!]!
  id: CustomID!
  name: TeamGenerationTypeEnum!
  updated_at: DateTime!
}

enum TeamGenerationTypeEnum {
  blind_draw
  split_switch
}

type TeamListResponse {
  teams: [Team!]!
  totalRecords: Int!
}

enum TeamStatusTypes {
  bye
  coming_up
  disqualified
  eliminated
  forfeited
  idle
  not_assigned
  playing
  registered
  waiting_list
  withdrawn
}

type TimeSlot {
  createdAt: DateTime!
  endTime: String!
  id: Float!
  startTime: String!
  updatedAt: DateTime!
}

type Tournament {
  created_at: DateTime!
  description: String!
  end_date: DateTime!
  id: CustomID!
  isPrivate: Boolean!
  levels: [Level!]!
  matchBestOfRounds: Float!
  name: String!
  numberOfPools: Float!
  playOffFormat: Format!
  poolPlayFormat: Format!
  splitSwitchGroupBy: SplitSwitchGroupByEnum
  sport: Sport!
  start_date: DateTime!
  status: TournamentStatusTypesEnum!
  teamGenerationType: TeamGenerationType!
  updated_at: DateTime!
}

type TournamentListResponse {
  totalRecords: Int!
  tournaments: [Tournament!]!
}

enum TournamentStatusTypesEnum {
  completed
  not_started
  play_off_in_progress
  pool_play_in_progress
}

input UpdateTournamentInput {
  clubId: Float!
  description: String!
  end_date: DateTime!
  formatId: Float!
  id: Float!
  isPrivate: Boolean!
  name: String!
  start_date: DateTime!
}

input UpdateUserClubDto {
  clubId: Float!
}

type UpdateUserResponseDto {
  message: String!
  user: User!
}

input UpdateUserRoleDto {
  roleId: Float!
}

type UpdateUserRoleResponseDto {
  message: String!
  userRoleClub: UserRoleClub!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFileResponseDto {
  url: String!
}

input UpsertCourtInputDto {
  clubId: Float!
  courtId: Float
  courtLength: Float
  courtWidth: Float
  dailySchedule: [DailyScheduleInputDto!]
  location: String
  name: String
}

type User {
  clubs: [Club!]
  created_at: DateTime!
  email: String!
  gender: GenderTypes!
  id: CustomID!
  isEmailVerified: Boolean!
  name: String!
  otpSecret: String!
  profileImage: String
  steps: [Step!]
  teams: [Team!]
  updated_at: DateTime!
  userRoleClub: [UserRoleClub!]
}

type UserListResponse {
  totalRecords: Int!
  users: [User!]!
}

type UserRoleClub {
  club: Club
  created_at: DateTime!
  id: CustomID!
  role: Role
  updated_at: DateTime!
  user: User
}

type UserWithRoleClub {
  user: User!
  userRoleClub: UserRoleClub
}

input VerifyEmailInputDto {
  email: String!
  otp: String!
}
# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Action {
  createdDate: DateTime!
  id: CustomID!
  name: String!
  policies: [Policy!]
  updatedDate: DateTime!
}

type Club {
  createdDate: DateTime!
  description: String!
  id: CustomID!
  logo: String!
  name: String!
  slug: String!
  updatedDate: DateTime!
  userRoleClub: [UserRoleClub!]
  users: [User!]
}

input CreateClubInputDto {
  description: String!
  logo: String!
  name: String!
  slug: String!
}

type CreateClubResponseDto {
  club: Club!
  message: String!
}

"""A custom scalar to handle numeric IDs as integers"""
scalar CustomID

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInputDto {
  email: String!
  password: String!
}

type LoginResponseDto {
  authTokens: RefreshTokenResponseDto!
  user: User!
}

type MessageResponseDto {
  message: String!
}

type Module {
  created_at: DateTime!
  id: CustomID!
  name: String!
  rolePolicyModule: [ModulePolicyRole!]
  updated_at: DateTime!
}

type ModulePolicyRole {
  created_at: DateTime!
  id: CustomID!
  module: Module!
  policy: Policy!
  role: Role!
  updated_at: DateTime!
}

type Mutation {
  createClub(input: CreateClubInputDto!): CreateClubResponseDto!
  login(input: LoginInputDto!): LoginResponseDto!
  refreshToken: RefreshTokenResponseDto!
  register(input: RegisterInputDto!): MessageResponseDto!
  sendForgotPasswordEmail(email: String!): MessageResponseDto!
  updateUserClub(input: UpdateUserClubDto!): UpdateUserResponseDto!
  updateUserRole(input: UpdateUserRoleDto!): UpdateUserRoleResponseDto!
  uploadFile(file: Upload!): UploadFileResponseDto!
  verifyEmail(input: VerifyEmailInputDto!): MessageResponseDto!
  verifyOtp(email: String!, otp: String!): MessageResponseDto!
}

type PermissionByRoleIdResponse {
  id: String!
  moduleId: String!
  moduleName: String!
  policyId: String!
  policyName: String!
  roleId: String!
}

type Policy {
  actions: [Action!]
  createdDate: DateTime!
  id: ID!
  name: String!
  rolePolicyModule: [ModulePolicyRole!]
  updatedDate: DateTime!
}

type Query {
  getAllClubs: [Club!]!
  getAllStepsByRole(input: StepsByRoleDto!): [Step!]!
  getClubById(clubId: Float!): Club!
  getPermissionsByRoleId(roleId: Float!): [PermissionByRoleIdResponse!]!
  getStepsOfUser: [Step!]!
  getUserById(clubId: Float, userId: Float!): UserWithRoleClub!
  getUsers: [User!]!
}

type RefreshTokenResponseDto {
  accessToken: String!
  expiresIn: Float!
  refreshToken: String!
}

input RegisterInputDto {
  clubId: Int
  email: String!
  name: String!
  password: String!
}

type Role {
  createdDate: DateTime!
  id: CustomID!
  name: String!
  rolePolicyModule: [ModulePolicyRole!]
  steps: [Step!]
  updatedDate: DateTime!
  userRoleClub: [UserRoleClub!]
}

type Step {
  createdDate: DateTime!
  id: ID!
  name: StepNames!
  roles: [Role!]
  updatedDate: DateTime!
  users: [User!]
}

enum StepNames {
  club_information_insertion
  club_selection
  email_verification
  registration
  user_type_selection
}

input StepsByRoleDto {
  roleId: Float!
}

input UpdateUserClubDto {
  clubId: Float!
}

type UpdateUserResponseDto {
  message: String!
  user: User!
}

input UpdateUserRoleDto {
  roleId: Float!
}

type UpdateUserRoleResponseDto {
  message: String!
  userRoleClub: UserRoleClub!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFileResponseDto {
  url: String!
}

type User {
  clubs: [Club!]
  created_at: DateTime!
  email: String!
  id: CustomID!
  isEmailVerified: Boolean!
  name: String!
  otpSecret: String!
  profileImage: String
  steps: [Step!]
  updated_at: DateTime!
  userRoleClub: [UserRoleClub!]
}

type UserRoleClub {
  club: Club
  created_at: DateTime!
  id: CustomID!
  role: Role
  updated_at: DateTime!
  user: User
}

type UserWithRoleClub {
  user: User!
  userRoleClub: UserRoleClub
}

input VerifyEmailInputDto {
  email: String!
  otp: String!
}